<?php

namespace {{ namespace }};

use {{ serviceDeleteRequest }};
use {{ serviceDestroyRequest }};
use {{ serviceRestoreRequest }};
use {{ serviceStoreRequest }};
use {{ serviceUpdateRequest }};
use Illuminate\Http\Request;
use Serenity\Payload;
use Serenity\Service;

class {{ class }} extends Service
{
  /**
   * Create a new instance of the service.
   */
  public function __construct()
  {
    //
  }

  /**
   * Return the payload for an index response.
   *
   * @param  \Illuminate\Http\Request $request
   * @return \Serenity\Payload
   */
  public function index(Request $request): Payload
  {
    if ($request->session()->has('error')) {
      return $this->payloadResponse([
        'message' => '',
        'level' => 'error',
        'data' => [],
      ]);
    }

    return $this->payloadResponse([
      'message' => '',
      'level' => 'error',
      'data' => [],
    ]);
  }

  /**
   * Return the payload for a create response.
   *
   * @param  \Illuminate\Http\Request $request
   * @return \Serenity\Payload
   */
  public function create(Request $request): Payload
  {
    if ($request->session()->has('error')) {
      return $this->payloadResponse([
        'message' => '',
        'level' => 'error',
        'data' => [],
      ]);
    }

    return $this->payloadResponse([
      'message' => '',
      'level' => 'error',
      'data' => [],
    ]);
  }

  /**
   * Return the payload for a show response.
   *
   * @param  \Illuminate\Http\Request $request
   * @return \Serenity\Payload
   */
  public function show(Request $request): Payload
  {
    if ($request->session()->has('error')) {
      return $this->payloadResponse([
        'message' => '',
        'level' => 'error',
        'data' => [],
      ]);
    }

    return $this->payloadResponse([
      'message' => '',
      'level' => 'error',
      'data' => [],
    ]);
  }

  /**
   * Return the payload for an edit response.
   *
   * @param  \Illuminate\Http\Request $request
   * @return \Serenity\Payload
   */
  public function edit(Request $request): Payload
  {
    if ($request->session()->has('error')) {
      return $this->payloadResponse([
        'message' => '',
        'level' => 'error',
        'data' => [],
      ]);
    }

    return $this->payloadResponse([
      'message' => '',
      'level' => 'error',
      'data' => [],
    ]);
  }

  /**
   * Return the payload for a store response.
   *
   * @param  {{ docBlockStore }} $request
   * @return \Serenity\Payload
   */
  public function store({{ requestStore }} $request): Payload
  {
    if ($request->session()->has('error')) {
      return $this->payloadResponse([
        'message' => '',
        'level' => 'error',
        'data' => [],
      ]);
    }

    return $this->payloadResponse([
      'message' => '',
      'level' => 'error',
      'data' => [],
    ]);
  }

  /**
   * Return the payload for an update response.
   *
   * @param  {{ docBlockUpdate }} $request
   * @return \Serenity\Payload
   */
  public function update({{ requestUpdate }} $request): Payload
  {
    if ($request->session()->has('error')) {
      return $this->payloadResponse([
        'message' => '',
        'level' => 'error',
        'data' => [],
      ]);
    }

    return $this->payloadResponse([
      'message' => '',
      'level' => 'error',
      'data' => [],
    ]);
  }

  /**
   * Return the payload for a delete response.
   *
   * @param  {{ docBlockDelete }} $request
   * @return \Serenity\Payload
   */
  public function delete({{ requestDelete }} $request): Payload
  {
    if ($request->session()->has('error')) {
      return $this->payloadResponse([
        'message' => '',
        'level' => 'error',
        'data' => [],
      ]);
    }

    return $this->payloadResponse([
      'message' => '',
      'level' => 'error',
      'data' => [],
    ]);
  }

  /**
   * Return the payload for a restore response.
   *
   * @param  {{ docBlockRestore }} $request
   * @return \Serenity\Payload
   */
  public function restore({{ requestRestore }} $request): Payload
  {
    if ($request->session()->has('error')) {
      return $this->payloadResponse([
        'message' => '',
        'level' => 'error',
        'data' => [],
      ]);
    }

    return $this->payloadResponse([
      'message' => '',
      'level' => 'error',
      'data' => [],
    ]);
  }

  /**
   * Return the payload for a destroy response.
   *
   * @param  {{ docBlockDestroy }} $request
   * @return \Serenity\Payload
   */
  public function destroy({{ requestDestroy }} $request): Payload
  {
    if ($request->session()->has('error')) {
      return $this->payloadResponse([
        'message' => '',
        'level' => 'error',
        'data' => [],
      ]);
    }

    return $this->payloadResponse([
      'message' => '',
      'level' => 'error',
      'data' => [],
    ]);
  }
}

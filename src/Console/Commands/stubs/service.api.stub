<?php

namespace DummyNamespace;

use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Serenity\Services\ApiService;

class DummyClass extends ApiService
{
  /**
   * Create a new instance of the service.
   */
  public function __construct()
  {
    //
  }

  /**
   * Return the payload for an index response.
   *
   * @param  \Illuminate\Http\Request $request
   * @return \Illuminate\Http\Response
   */
  public function list(Request $request): Response
  {
    if ($request->session()->has('error')) {
      return $this->respond([
        'message' => '',
        'level' => 'error',
        'data' => [],
      ]);
    }

    return $this->respond([
      'message' => '',
      'level' => 'error',
      'data' => [],
    ]);
  }

  /**
   * Return the payload for a store response.
   *
   * @param  \Illuminate\Http\Request $request
   * @return \Illuminate\Http\Response
   */
  public function store(Request $request): Response
  {
    if ($request->session()->has('error')) {
      return $this->respond([
        'data' => '',
        'message' => '',
        'status' => '',
      ]);
    }

    return $this->respond([
      'data' => '',
      'message' => '',
      'status' => '',
    ]);
  }

  /**
   * Return the payload for an update response.
   *
   * @param  \Illuminate\Http\Request $request
   * @return \Illuminate\Http\Response
   */
  public function update(Request $request): Response
  {
    if ($request->session()->has('error')) {
      return $this->respond([
        'data' => '',
        'message' => '',
        'status' => '',
      ]);
    }

    return $this->respond([
      'data' => '',
      'message' => '',
      'status' => '',
    ]);
  }

  /**
   * Return the payload for a delete response.
   *
   * @param  \Illuminate\Http\Request $request
   * @return \Illuminate\Http\Response
   */
  public function delete(Request $request): Response
  {
    if ($request->session()->has('error')) {
      return $this->respond([
        'data' => '',
        'message' => '',
        'status' => '',
      ]);
    }

    return $this->respond([
      'data' => '',
      'message' => '',
      'status' => '',
    ]);
  }

  /**
   * Return the payload for a restore response.
   *
   * @param  \Illuminate\Http\Request $request
   * @return \Illuminate\Http\Response
   */
  public function restore(Request $request): Response
  {
    if ($request->session()->has('error')) {
      return $this->respond([
        'data' => '',
        'message' => '',
        'status' => '',
      ]);
    }

    return $this->respond([
      'data' => '',
      'message' => '',
      'status' => '',
    ]);
  }

  /**
   * Return the payload for a destroy response.
   *
   * @param  \Illuminate\Http\Request $request
   * @return \Illuminate\Http\Response
   */
  public function destroy(Request $request): Response
  {
    if ($request->session()->has('error')) {
      return $this->respond([
        'data' => '',
        'message' => '',
        'status' => '',
      ]);
    }

    return $this->respond([
      'data' => '',
      'message' => '',
      'status' => '',
    ]);
  }
}
